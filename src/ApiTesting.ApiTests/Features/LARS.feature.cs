// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ApiTesting.ApiTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("LARS")]
    public partial class LARSFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "LARS.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "LARS", "\t\tAs a Course Directory Micoservice function\r\n\t\tI want to Access the LARS resourc" +
                    "e\r\n\t\tSo that I retrieve LARS data for my searches", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with No Facet")]
        [NUnit.Framework.CategoryAttribute("lars")]
        [NUnit.Framework.TestCaseAttribute("biology", null)]
        [NUnit.Framework.TestCaseAttribute("hair and beauty", null)]
        [NUnit.Framework.TestCaseAttribute("english", null)]
        [NUnit.Framework.TestCaseAttribute("beuaty", null)]
        [NUnit.Framework.TestCaseAttribute("hair", null)]
        [NUnit.Framework.TestCaseAttribute("plumming", null)]
        [NUnit.Framework.TestCaseAttribute("engineering", null)]
        [NUnit.Framework.TestCaseAttribute("", null)]
        [NUnit.Framework.TestCaseAttribute("in", null)]
        [NUnit.Framework.TestCaseAttribute("(QCF)", null)]
        public virtual void SendingALARSPostWithNoFacet(string search, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "lars"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with No Facet", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 8
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
  testRunner.When(string.Format("user sends LARS request with no facets {0}", search), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 10
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with No Facet Special Chars")]
        [NUnit.Framework.CategoryAttribute("lars")]
        [NUnit.Framework.TestCaseAttribute("&", null)]
        [NUnit.Framework.TestCaseAttribute("-", null)]
        [NUnit.Framework.TestCaseAttribute("(", null)]
        [NUnit.Framework.TestCaseAttribute(")", null)]
        [NUnit.Framework.TestCaseAttribute("\'", null)]
        [NUnit.Framework.TestCaseAttribute("@", null)]
        [NUnit.Framework.TestCaseAttribute("+", null)]
        [NUnit.Framework.TestCaseAttribute("=", null)]
        [NUnit.Framework.TestCaseAttribute(":", null)]
        [NUnit.Framework.TestCaseAttribute(",", null)]
        public virtual void SendingALARSPostWithNoFacetSpecialChars(string search, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "lars"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with No Facet Special Chars", null, @__tags);
#line 25
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 26
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
  testRunner.When(string.Format("user sends LARS request with no facets {0}", search), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
  testRunner.Then("Response should contains zero records", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with Facets")]
        [NUnit.Framework.CategoryAttribute("lars")]
        [NUnit.Framework.TestCaseAttribute("biology", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'3\'", "AwardOrgCode eq \'EDEXCEL\'", null)]
        [NUnit.Framework.TestCaseAttribute("biology", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'4\'", "AwardOrgCode eq \'EDEXCEL\'", null)]
        [NUnit.Framework.TestCaseAttribute("biology", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'2\'", "AwardOrgCode eq \'IB\'", null)]
        [NUnit.Framework.TestCaseAttribute("biology", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'3\'", "AwardOrgCode eq \'IB\'", null)]
        [NUnit.Framework.TestCaseAttribute("biology", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'2\'", "AwardOrgCode eq \'AQA\'", null)]
        [NUnit.Framework.TestCaseAttribute("biology", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'2\'", "AwardOrgCode eq \'aqa\'", null)]
        [NUnit.Framework.TestCaseAttribute("biology", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'3\'", "AwardOrgCode eq \'AQA\'", null)]
        [NUnit.Framework.TestCaseAttribute("biology", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'4\'", "AwardOrgCode eq \'AQA\'", null)]
        [NUnit.Framework.TestCaseAttribute("ENGLISH", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'7\'", "AwardOrgCode eq \'UOT\'", null)]
        [NUnit.Framework.TestCaseAttribute("DENTAL", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'5\'", "AwardOrgCode eq \'OU\'", null)]
        [NUnit.Framework.TestCaseAttribute("dental", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'6\'", "AwardOrgCode eq \'OU\'", null)]
        [NUnit.Framework.TestCaseAttribute("medicine", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'X\'", "AwardOrgCode eq \'NONE\'", null)]
        [NUnit.Framework.TestCaseAttribute("APPRENTICE", "true", "NotionalNVQLevelv2", "AwardOrgCode", "NotionalNVQLevelv2 eq \'1\'", "AwardOrgCode eq \'WBA\'", null)]
        public virtual void SendingALARSPostWithFacets(string search, string count, string facet1, string facet2, string filter1, string filter2, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "lars"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with Facets", null, @__tags);
#line 43
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 44
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
  testRunner.When(string.Format("user sends LARS request with facets {0}, {1}, {2}, {3}, {4}, {5}", search, count, facet1, facet2, filter1, filter2), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 46
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with One Facet no search term")]
        [NUnit.Framework.CategoryAttribute("lars")]
        public virtual void SendingALARSPostWithOneFacetNoSearchTerm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with One Facet no search term", null, new string[] {
                        "lars"});
#line 64
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 65
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "search",
                        "count",
                        "facets",
                        "filter"});
            table1.AddRow(new string[] {
                        "",
                        "true",
                        "NotionalNVQLevelv2",
                        "NotionalNVQLevelv2 eq \'2\'"});
#line 66
  testRunner.When("user sends LARS request with one facet:", ((string)(null)), table1, "When ");
#line 69
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with One Facet level 2")]
        [NUnit.Framework.CategoryAttribute("lars")]
        public virtual void SendingALARSPostWithOneFacetLevel2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with One Facet level 2", null, new string[] {
                        "lars"});
#line 72
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 73
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "search",
                        "count",
                        "facets",
                        "filter"});
            table2.AddRow(new string[] {
                        "biology",
                        "true",
                        "NotionalNVQLevelv2",
                        "NotionalNVQLevelv2 eq \'2\'"});
#line 74
  testRunner.When("user sends LARS request with one facet:", ((string)(null)), table2, "When ");
#line 77
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with One Facet level 3")]
        [NUnit.Framework.CategoryAttribute("lars")]
        public virtual void SendingALARSPostWithOneFacetLevel3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with One Facet level 3", null, new string[] {
                        "lars"});
#line 80
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 81
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "search",
                        "count",
                        "facets",
                        "filter"});
            table3.AddRow(new string[] {
                        "biology",
                        "true",
                        "NotionalNVQLevelv2",
                        "NotionalNVQLevelv2 eq \'3\'"});
#line 82
  testRunner.When("user sends LARS request with one facet:", ((string)(null)), table3, "When ");
#line 85
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with One Facet OrgCode")]
        [NUnit.Framework.CategoryAttribute("lars")]
        public virtual void SendingALARSPostWithOneFacetOrgCode()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with One Facet OrgCode", null, new string[] {
                        "lars"});
#line 88
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 89
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "search",
                        "count",
                        "facets",
                        "filter"});
            table4.AddRow(new string[] {
                        "biology",
                        "true",
                        "AwardOrgCode",
                        "AwardOrgCode eq \'EDEXCEL\'"});
#line 90
  testRunner.When("user sends LARS request with one facet:", ((string)(null)), table4, "When ");
#line 93
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with One Facet Hair and Beauty")]
        [NUnit.Framework.CategoryAttribute("lars")]
        public virtual void SendingALARSPostWithOneFacetHairAndBeauty()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with One Facet Hair and Beauty", null, new string[] {
                        "lars"});
#line 96
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 97
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "search",
                        "count",
                        "facets",
                        "filter"});
            table5.AddRow(new string[] {
                        "geography",
                        "true",
                        "NotionalNVQLevelv2",
                        "NotionalNVQLevelv2 eq \'4\'"});
#line 98
  testRunner.When("user sends LARS request with one facet:", ((string)(null)), table5, "When ");
#line 101
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with One Facet Hair and Beauty level 3")]
        [NUnit.Framework.CategoryAttribute("lars")]
        public virtual void SendingALARSPostWithOneFacetHairAndBeautyLevel3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with One Facet Hair and Beauty level 3", null, new string[] {
                        "lars"});
#line 104
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 105
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "search",
                        "count",
                        "facets",
                        "filter"});
            table6.AddRow(new string[] {
                        "english",
                        "true",
                        "NotionalNVQLevelv2",
                        "NotionalNVQLevelv2 eq \'3\'"});
#line 106
  testRunner.When("user sends LARS request with one facet:", ((string)(null)), table6, "When ");
#line 109
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with Two Facets")]
        [NUnit.Framework.CategoryAttribute("lars")]
        public virtual void SendingALARSPostWithTwoFacets()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with Two Facets", null, new string[] {
                        "lars"});
#line 112
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 113
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "search",
                        "count",
                        "facet1",
                        "facet2",
                        "filter1",
                        "filter2"});
            table7.AddRow(new string[] {
                        "biology",
                        "true",
                        "NotionalNVQLevelv2",
                        "AwardOrgCode",
                        "NotionalNVQLevelv2 eq \'4\'",
                        "AwardOrgCode eq \'EDEXCEL\'"});
#line 114
  testRunner.When("user sends LARS request with two facets:", ((string)(null)), table7, "When ");
#line 117
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Sending a LARS post with Two Facets no search term")]
        [NUnit.Framework.CategoryAttribute("lars")]
        public virtual void SendingALARSPostWithTwoFacetsNoSearchTerm()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Sending a LARS post with Two Facets no search term", null, new string[] {
                        "lars"});
#line 120
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 121
  testRunner.Given("a user is using the LARS resource", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "search",
                        "count",
                        "facet1",
                        "facet2",
                        "filter1",
                        "filter2"});
            table8.AddRow(new string[] {
                        "",
                        "true",
                        "NotionalNVQLevelv2",
                        "AwardOrgCode",
                        "NotionalNVQLevelv2 eq \'4\'",
                        "AwardOrgCode eq \'EDEXCEL\'"});
#line 122
  testRunner.When("user sends LARS request with two facets:", ((string)(null)), table8, "When ");
#line 125
  testRunner.Then("Response should contain the correct information", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
